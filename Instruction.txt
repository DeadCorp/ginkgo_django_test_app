Інструкція UA
    Клонуєм репозиторій
    Cтворюємо віртуальне середовище: python3.8 -m venv venv
    Активовуємо його: source venv/bin/activate
    Встановлюємо потрібні бібліотеки: pip3.8 install -r requirements.txt
    Можна створити свого суперкористувача за допомогою команди: python manage.py createsuperuser
    Далі потрібно налаштувати базу даних Redis.
        Для цього  у терміналі по черзі потрібно вписати наступні команди:
            wget http://download.redis.io/redis-stable.tar.gz
            tar xvzf redis-stable.tar.gz
            cd redis-stable
            make

            sudo cp src/redis-server /usr/local/bin/
            sudo cp src/redis-cli /usr/local/bin/

            І запустити саму базу даних командою: redis-server
    Далі потрібно запустити Сelery воркера для виконання поклажі в корзину у бекграунді: celery -A final worker -l info

    Потрібно підключення бази даних MySql
        Вона повинна бути встановлена у системі.
        Якщо її немає - sudo apt-get install mysql-server mysql-client
        Після налаштування потрібно зайти у консоль МуSql - mysql -u root -p

        Потім необхідно створити базу даних для проекту з назвою final(або іншою, тоді доведеться змінити назву у файлі конфігурації)
            CREATE DATABASE final DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
        Далі потрібно створити окремого користувача для цієї бази (ім'я та пароль можна змінити у файлі конфігурації)
            CREATE USER 'final'@'localhost' IDENTIFIED BY Final123456789;
            GRANT ALL PRIVILEGES ON 'someapp'.* TO 'django'@'localhost';
            FLUSH PRIVILEGES;
        Далі потрібні бібліотеки для роботи бази із Python:
            sudo apt-get install python3-dev libmysqlclient-dev build-essential
            та у віртуальному середовищі pip3.8 install mysqlclient
        Тепер створити свого суперкористувача за допомогою команди: python manage.py createsuperuser
        username: deadcorp
        password: 111222333000qwa
    Тепер потрібно створити файли міграції та засосувати їх
        python manage.py makemigrations
        python manage.py migrate
    Налаштування uwsgi
        у корні проетку у папці deploy є файл final_uwsgi.ini, де зберігаються налаштування uwsgi, та шляхи до потрібних файлів(потрібно змінити шляхи)
    Далі для запуску потрібно встановити nginx
        sudo apt-get install nginx
        у корні проетку у папці deploy є файл final_nginx.conf з налаштуваннями nginx та шляхи до файлів(потрібно змінити шляхи)
        потрібний файл uwsgi_params лежить у ції папці
        далі потрібно створити посилнання на файл конфігурації
            знаходячись у папці project/deploy
            sudo ln -s final_nginx.conf /etc/nginx/sites-enabled/
        далі потрібно забрати ститичні файли
            python manage.py collectstatic
        далі потрібно запустити nginx
            sudo /etc/init.d/nginx start
    Тепер для запуску django потрібно прописати команду
        uwsgi --ini deploy/final_uwsgi.ini




    Тепер у браузері можна перейти по адресі http://127.0.0.1/ в результаті відкриється сторінка Products на якій представлені усі продукти в базі даних.
    У кожного продукту є 3 кнопки:
        Кнопка Refresh product data - дозволяє обновити дані про продукт і отримати актуальну інформацію.
        Кнопка Product orders - перенаправляє користувача на сторінку, де він може переглянути усі його замовлення цього конкретного продукту,
            під кожним замовлення відображено статус замовлення, і по натисненню на статус користувача перенаправляє на сторінку де можна передивитися знімки зроблені під час замовлення.
        Кнопка Add to cart - Після її натиснення користувачу видається модальне вікно, з інформацією про акаунти які можуть бути обрані для поклажі.
                При виборі варіанту додати аккаунт, користувача перенаправляє на сторінку додавання акаунта, і після вибору потрібного акаунта,
                 користувачу потрібно самостійно повернутись до товару який він хотів замовити та повторити замовлення.
                При продовженні поклажі, створюється замовлення і розпочинається процес поклажі в корзину, який невидно користувачеві.
                    Результат цього, та інших замовленнь користувач може переглянути натиснувши кнопку Product orders, біля відповідного товару.
    У меню навігації зверху розміщено посилання на сторінку Products, що описана вище.
        Якщо користувач неавторизований на сайті він бачить посилання лише на цю сторінку, та посилання на сторінку входу та реєстрації.
    Якщо користувач авторизований, то він бачить ще посилання на сторінку Search products i Supplier accounts.

        Сторінка Search products - сторінка для пошуку товарів на сатах поставщиків.На ній присутнє поле для вводу SKU товарів,
            формат їх вводу розписаний на цій сторінці.
            Під полем вводу представлені 5 останніх пошуків, де знаходиться інформація про кількість знайдених продуктів, та час витрачений на їх пошук,
             та перелік СКУ знайдених продуктів.
            Після початку пошуку відбувається розбиття введених СКУ та запускається Scrapy spider який виконує пошук та витягування даних.

        Сторінка Supplier accounts - на цій сторінці представлені усі акаунти поставщиків які можуть бути використані будь яким користувачем для поклажі товару у корзину.
            Акаунти посортовані по вкладках з назвою поставщика.
            У звичайного користувача є можливість додати акаунт.
            Через адмін панель можна видаляти будь який акаунт.
            Користувач може вибрати акаунт для додавання в корзину при додаванні товару зі сторінки Products.
            По натисненню кнопки Add Supplier Account користувача перенаправляє на сторінку додавання акаунта, де потрібно вибрати поставщика та заповнити інші дані.

Instruction EN
    Clone repository
    Create a virtual environment: python3.8 -m venv venv
    Activate it: source venv/bin/activate
    Install the necessary libraries: pip3.8 install -r requirements.txt
    You can create your superuser with the command: python manage.py createsuperuser
    Next you need to configure the database Redis.
        To do this, enter the following commands in turn in the terminal:
            wget http://download.redis.io/redis-stable.tar.gz
            tar xvzf redis-stable.tar.gz
            cd redis-stable
            make

            sudo cp src/redis-server /usr/local/bin/
            sudo cp src/redis-cli /usr/local/bin/

            And run the database  a team: redis-server
    Next you need to run Сelery worker to carry luggage in the basket in the background: celery -A final worker -l info

    MySql database connection required
        It must be installed in the system.
        If it is not present - sudo apt-get install mysql-server mysql-client
        After configuration, you need to go to the console MuSql - mysql -u root -p

        Then you need to create a database for the project named final (or another, then you have to change the name in the configuration file below.)
            CREATE DATABASE final DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
        Next you need to create a separate user for this database (you can change the name and password in the configuration file below)
            CREATE USER 'final' @ 'localhost' IDENTIFIED BY Final123456789;
            GRANT ALL PRIVILEGES ON 'someapp'. * TO 'django' @ 'localhost';
            FLUSH PRIVILEGES;
        Next you need libraries to work with Python:
            sudo apt-get install python3-dev libmysqlclient-dev build-essential
        Now create your superuser with the command: python manage.py createsuperuser
        username: deadcorp
        password: 111222333000qwa
    Now you need to create the migration files and suck them
        python manage.py makemigrations
        python manage.py migrate
    Uwsgi settings
        at the root of the project in the deploy folder there is a file final_uwsgi.ini, where the uwsgi settings are stored, and the paths to the desired files (you need to change the paths)
    Next, you need to install nginx to run
        sudo apt-get install nginx
        in the root of the project in the deploy folder there is a file final_nginx.conf with nginx settings and paths to files (it is necessary to change ways)
        the required uwsgi_params file is in this folder
        then you need to create a link to the configuration file
            being in the project/deploy folder
            sudo ln -s final_nginx.conf /etc/nginx/sites-enabled /
        then you need to pick up the static files
            python manage.py collectstatic
        then you need to run nginx
            sudo /etc/init.d/nginx start
    Now you need to write a command to run django
        uwsgi --ini deploy/final_uwsgi.ini

    Now in the browser you can go to the address http://127.0.0.1/  as a result, the Products page opens, which presents all the products in the database.
    Each product has 3 buttons:
        Refresh product data button - allows you to update product data and get up-to-date information.
        Product orders button - redirects the user to a page where he can view all his orders for this particular product,
            under each order the status of the order is displayed, and after clicking on the status of the user redirects to the page,
            where you can view the pictures taken during the order.
       Add to cart button - After clicking it, the user is given a modal window with information about the accounts that can be selected for luggage.
                When selecting the option to add an account, the user is redirected to the page to add an account, and after selecting the desired account,
                  the user must return to the product he wanted to order and repeat the order.
             When the luggage is extended, an order is created and the baggage process begins in the basket, which is invisible to the user.
                 The user can view the result of this and other orders by clicking the Product orders button next to the corresponding product.
    In the navigation menu at the top there is a link to the Products page described above.
        If the user is not authorized on the site, he sees a link only to this page, and a link to the login and registration page.
    If the user is authorized, he sees a link to the page Search products and Supplier accounts.

        Search products page - a page for searching for goods on the suppliers' hours. There is a field for entering SKU goods, the format of their input is painted on this page.
          Below the input field are the last 5 searches, which contains information about the number of products found, and the time spent searching for them,
              and list SKU products found.
            After the start of the search, the entered SKUs are split and the Scrapy spider is started, which performs the search and retrieval of data.

        Supplier accounts page - this page presents all vendor accounts that can be used by any user to put the product in the cart.
          Accounts are sorted by tabs with the name of the supplier.
            The average user has the ability to add an account.
            The superuser can also delete any account in admin panel.
            The user can select account for for place to cart when start place product on Products page.
           By clicking the Add Supplier Account button, the user is redirected to the account addition page, where you need to select a provider and fill in other data.